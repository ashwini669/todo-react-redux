{"ast":null,"code":"import { ADD_TODO, DELETE_TODO, UPDATE_TODO } from './actions';\nimport { todos } from './states';\nexport let reducer = (state = todos, action) => {\n  let newTodos;\n\n  switch (action.type) {\n    case ADD_TODO:\n      newTodos = [...state];\n      newTodos.push(action.payload);\n      let tasks = localStorage.getItem(\"todo_table\");\n\n      if (tasks == null) {\n        var todo = [];\n      } else {\n        todo = JSON.parse(tasks);\n      }\n\n      todo.push({\n        'Task': action.payload.name,\n        'Key': action.payload.id\n      });\n      localStorage.setItem(\"todo_table\", JSON.stringify(todo));\n      return todo;\n      break;\n\n    case DELETE_TODO:\n      newTodos = [...state];\n      newTodos = newTodos.filter(todo => todo.id !== action.payload);\n      var todo = [];\n\n      if (localStorage.getItem('todo_table') === null) {\n        todo = [];\n      } else {\n        todo = JSON.parse(localStorage.getItem('todo_table'));\n      }\n\n      todo = todo.filter(function (todo, index) {\n        return todo.Key !== action.payload;\n      });\n      localStorage.setItem('todo_table', JSON.stringify(todo));\n      return todo;\n      break;\n\n    case UPDATE_TODO:\n      const updatedList = m.map(item => {\n        if (item.Key === key) {\n          inputRef.current.value = task;\n          window.$keyValue = key;\n        }\n      });\n      var todo = [];\n\n      if (localStorage.getItem('todo_table') === null) {\n        todo = [];\n      } else {\n        todo = JSON.parse(localStorage.getItem('todo_table'));\n      }\n\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/ashwini/Music/todo-redux/src/redux/reducer.js"],"names":["ADD_TODO","DELETE_TODO","UPDATE_TODO","todos","reducer","state","action","newTodos","type","push","payload","tasks","localStorage","getItem","todo","JSON","parse","name","id","setItem","stringify","filter","index","Key","updatedList","m","map","item","key","inputRef","current","value","task","window","$keyValue"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,WAAlD;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,OAAO,IAAIC,OAAO,GAAC,CAACC,KAAK,GAACF,KAAP,EAAaG,MAAb,KAAwB;AACvC,MAAIC,QAAJ;;AAEA,UAAOD,MAAM,CAACE,IAAd;AAEI,SAAKR,QAAL;AACgBO,MAAAA,QAAQ,GAAC,CAAC,GAAGF,KAAJ,CAAT;AACAE,MAAAA,QAAQ,CAACE,IAAT,CAAcH,MAAM,CAACI,OAArB;AAEA,UAAIC,KAAK,GAACC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAV;;AACA,UAAGF,KAAK,IAAE,IAAV,EACA;AACE,YAAIG,IAAI,GAAC,EAAT;AACA,OAHF,MAII;AACCA,QAAAA,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWL,KAAX,CAAL;AACA;;AAELG,MAAAA,IAAI,CAACL,IAAL,CAAU;AAAC,gBAAOH,MAAM,CAACI,OAAP,CAAeO,IAAvB;AAA4B,eAAMX,MAAM,CAACI,OAAP,CAAeQ;AAAjD,OAAV;AACAN,MAAAA,YAAY,CAACO,OAAb,CAAqB,YAArB,EAAkCJ,IAAI,CAACK,SAAL,CAAeN,IAAf,CAAlC;AAEA,aAAOA,IAAP;AACA;;AAEhB,SAAKb,WAAL;AACgBM,MAAAA,QAAQ,GAAC,CAAC,GAAGF,KAAJ,CAAT;AACAE,MAAAA,QAAQ,GAACA,QAAQ,CAACc,MAAT,CAAgBP,IAAI,IAAGA,IAAI,CAACI,EAAL,KAAYZ,MAAM,CAACI,OAA1C,CAAT;AAEA,UAAII,IAAI,GAAC,EAAT;;AACA,UAAGF,YAAY,CAACC,OAAb,CAAqB,YAArB,MAAqC,IAAxC,EAA6C;AACzCC,QAAAA,IAAI,GAAC,EAAL;AACH,OAFD,MAEM;AACFA,QAAAA,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAAN;AACH;;AACDC,MAAAA,IAAI,GAAEA,IAAI,CAACO,MAAL,CAAY,UAASP,IAAT,EAAcQ,KAAd,EAAqB;AACnC,eAAOR,IAAI,CAACS,GAAL,KAAWjB,MAAM,CAACI,OAAzB;AACD,OAFG,CAAN;AAGAE,MAAAA,YAAY,CAACO,OAAb,CAAqB,YAArB,EAAkCJ,IAAI,CAACK,SAAL,CAAeN,IAAf,CAAlC;AAEA,aAAOA,IAAP;AACA;;AAEhB,SAAKZ,WAAL;AACgB,YAAMsB,WAAW,GAAEC,CAAC,CAACC,GAAF,CAAMC,IAAI,IAAG;AAC5B,YAAGA,IAAI,CAACJ,GAAL,KAAaK,GAAhB,EACA;AACAC,UAAAA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB,GAAuBC,IAAvB;AACAC,UAAAA,MAAM,CAACC,SAAP,GAAiBN,GAAjB;AACC;AACJ,OANkB,CAAnB;AASA,UAAId,IAAI,GAAC,EAAT;;AACA,UAAGF,YAAY,CAACC,OAAb,CAAqB,YAArB,MAAqC,IAAxC,EAA6C;AACzCC,QAAAA,IAAI,GAAC,EAAL;AACH,OAFD,MAEM;AACFA,QAAAA,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAAN;AACH;;AACD;;AAEhB;AACS,aAAOR,KAAP;AA1Db;AA4DH,CA/DM","sourcesContent":["import { ADD_TODO, DELETE_TODO, UPDATE_TODO} from './actions';\nimport {todos} from './states'\n\nexport let reducer=(state=todos,action) => {\n    let newTodos;\n    \n    switch(action.type)\n    {  \n        case ADD_TODO:\n                        newTodos=[...state];\n                        newTodos.push(action.payload)\n\n                        let tasks=localStorage.getItem(\"todo_table\");\n                        if(tasks==null)\n                        {\n                          var todo=[];\n                         }\n                        else{\n                             todo=JSON.parse(tasks);\n                            }\n                            \n                        todo.push({'Task':action.payload.name,'Key':action.payload.id});\n                        localStorage.setItem(\"todo_table\",JSON.stringify(todo));\n\n                        return todo;\n                        break;\n\n        case DELETE_TODO:\n                        newTodos=[...state];\n                        newTodos=newTodos.filter(todo=> todo.id !== action.payload);\n\n                        var todo=[];\n                        if(localStorage.getItem('todo_table')===null){\n                            todo=[];\n                        } else{\n                            todo= JSON.parse(localStorage.getItem('todo_table'));\n                        }\n                        todo= todo.filter(function(todo,index) {\n                            return todo.Key!==action.payload\n                          });\n                        localStorage.setItem('todo_table',JSON.stringify(todo));\n\n                        return todo;\n                        break; \n\n        case UPDATE_TODO:\n                        const updatedList= m.map(item =>{\n                            if(item.Key === key)\n                            {\n                            inputRef.current.value=task;\n                            window.$keyValue=key;\n                            }\n                        })\n\n\n                        var todo=[];\n                        if(localStorage.getItem('todo_table')===null){\n                            todo=[];\n                        } else{\n                            todo= JSON.parse(localStorage.getItem('todo_table'));\n                        }\n                        break;  \n                \n        default:\n                 return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}